# Use NVIDIA CUDA base image with Python
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    BOLTZ_CACHE="/opt/boltz_cache" \
    CUDA_LAUNCH_BLOCKING=1 \
    TORCH_USE_CUDA_DSA=1 \
    PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512

# Install system dependencies
RUN apt-get update && apt-get install -y build-essential
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.10 \
    python3.10-dev \
    python3-pip \
    python3-setuptools \
    git \
    wget \
    curl \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create a symbolic link for python
RUN ln -sf /usr/bin/python3.10 /usr/bin/python
RUN ln -sf /usr/bin/python3.10 /usr/bin/python3

# Create boltz cache directory
RUN mkdir -p ${BOLTZ_CACHE}

# Upgrade pip
RUN python -m pip install --no-cache-dir --upgrade pip

# Install PyTorch with CUDA 11.8 support (better compatibility with V100)
RUN pip install --no-cache-dir torch==2.0.1+cu118 torchvision==0.15.2+cu118 torchaudio==2.0.2 --index-url https://download.pytorch.org/whl/cu118

# Install specific version of triton that works with V100
RUN pip install --no-cache-dir triton==2.0.0

# Install Boltz-2
RUN pip install --no-cache-dir boltz

# Install additional packages for Boltz-2 with updated pytorch-lightning
RUN pip install --no-cache-dir tensorboard pytorch-lightning==2.5.2

# Try to patch or remove trifast
RUN python -c "import sys; sys.path.insert(0, '/usr/local/lib/python3.10/dist-packages'); \
    try: \
        import trifast; \
        print('Trifast found, attempting to disable...'); \
    except: \
        print('Trifast not found, continuing...')" || true

# Pre-download Boltz-2 model weights to cache directory
RUN cd ${BOLTZ_CACHE} && \
    wget -q https://huggingface.co/boltz-community/boltz-2/resolve/main/boltz2_conf.ckpt && \
    wget -q https://huggingface.co/boltz-community/boltz-2/resolve/main/boltz2_aff.ckpt && \
    wget -q https://huggingface.co/boltz-community/boltz-2/resolve/main/mols.tar && \
    tar -xf mols.tar && \
    rm -f mols.tar

# Create a patch script to disable bf16 operations
RUN echo '#!/usr/bin/env python3\n\
import torch\n\
torch.backends.cuda.matmul.allow_tf32 = False\n\
torch.backends.cudnn.allow_tf32 = False\n\
torch.set_float32_matmul_precision("high")\n\
' > /opt/configure_torch.py

# Create a working directory
WORKDIR /workspace

# Copy the launching script run.sh from the project folder @common
COPY run_dok.sh /workspace/run_dok.sh
RUN chmod +x /workspace/run_dok.sh

# Create a wrapper script that configures torch before running boltz
RUN echo '#!/bin/bash\n\
python /opt/configure_torch.py\n\
exec "$@"' > /entrypoint.sh && chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
CMD ["/bin/sh"]